name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - test
jobs:
  start-server:
    runs-on: self-hosted
    steps:
      - name: Set Environment Variables
        id: set-env
        run: |
          if [ "${{ github.ref }}" == "refs/heads/test" ]; then
            echo "STAGE=testing" >> $GITHUB_ENV
            echo "CACHE_KEY=testing" >> $GITHUB_ENV
          else
            echo "STAGE=prod" >> $GITHUB_ENV
            echo "CACHE_KEY=production" >> $GITHUB_ENV
          fi
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache server npm dependencies
        uses: actions/cache@v4
        with:
          path: |
            server/node_modules
          key: ${{ runner.os }}-npm-server-${{ env.CACHE_KEY }}-${{ hashFiles('server/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-server-${{ env.CACHE_KEY }}

      - name: Install server npm dependencies
        run: |
          cd server
          npm ci

      - name: Migrate, Seed Database and Start Server to Production
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          cd server
          npm run migrate
          npm run seed 
          pm2 restart "server" || pm2 start npm --name "server" -- start
          pm2 save
        env:
          NODE_ENV: 'production'
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_ROOT_PASSWORD: ${{ secrets.DB_ROOT_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          MYSQL_SSL_CA: ${{ secrets.MYSQL_SSL_CA }}
          MYSQL_SSL_CERT: ${{ secrets.MYSQL_SSL_CERT }}
          MYSQL_SSL_KEY: ${{ secrets.MYSQL_SSL_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
          AWS_FILE_BUCKET: ${{ secrets.AWS_FILE_BUCKET }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_S3_OBJECT_BASEURL: ${{ secrets.AWS_S3_OBJECT_BASEURL }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_SECRET }}
          SALT_ROUNDS: ${{ secrets.SALT_ROUNDS }}
          PORT: ${{ secrets.PORT }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
          COOKIE_SECRET: ${{ secrets.COOKIE_SECRET }}
          CLOUDFRONT_BASE_URL: ${{ secrets.CLOUDFRONT_BASE_URL }}
          CLOUDFRONT_KEY_PAIR_ID: ${{secrets.CLOUDFRONT_KEY_PAIR_ID}}
          CLOUDFRONT_PRIVATE_KEY: ${{ secrets.CLOUDFRONT_PRIVATE_KEY }}
          USER1_EMAIL: ${{ secrets.USER1_EMAIL }}
          USER1_PASSWORD: ${{ secrets.USER1_PASSWORD }}
          USER2_EMAIL: ${{ secrets.USER2_EMAIL }}
          USER2_PASSWORD: ${{ secrets.USER2_PASSWORD }}
          USER3_EMAIL: ${{ secrets.USER3_EMAIL }}
          USER3_PASSWORD: ${{ secrets.USER3_PASSWORD }}
          USER4_EMAIL: ${{ secrets.USER4_EMAIL }}
          USER4_PASSWORD: ${{ secrets.USER4_PASSWORD }}
          REVALIDATION_SECRET: ${{ secrets.REVALIDATION_SECRET }}
          NEXT_JS_API_URL: ${{ secrets.NEXT_JS_API_URL }}
          NEXT_JS_URL: ${{ secrets.NEXT_JS_URL }}

      - name: Migrate, Seed Database and Start Server to Test Environment
        if: ${{ github.ref == 'refs/heads/test' }}
        run: |
          cd server
          npm run migrate
          npm run seed 
          pm2 restart "test-server" || pm2 start npm --name "test-server" -- start
          pm2 save
        env:
          NODE_ENV: 'testing'
          DB_USERNAME: ${{ secrets.DB_USERNAME_TEST }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD_TEST }}
          DB_ROOT_PASSWORD: ${{ secrets.DB_ROOT_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME_TEST }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          MYSQL_SSL_CA: ${{ secrets.MYSQL_SSL_CA_TEST }}
          MYSQL_SSL_CERT: ${{ secrets.MYSQL_SSL_CERT_TEST }}
          MYSQL_SSL_KEY: ${{ secrets.MYSQL_SSL_KEY_TEST }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
          AWS_FILE_BUCKET: ${{ secrets.AWS_FILE_BUCKET_TEST }}
          AWS_REGION: ${{ secrets.AWS_REGION_TEST }}
          AWS_S3_OBJECT_BASEURL: ${{ secrets.AWS_S3_OBJECT_BASEURL_TEST }}
          JWT_SECRET: ${{ secrets.JWT_SECRET_TEST }}
          JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_SECRET_TEST }}
          SALT_ROUNDS: ${{ secrets.SALT_ROUNDS }}
          PORT: ${{ secrets.PORT_TEST }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
          COOKIE_SECRET: ${{ secrets.COOKIE_SECRET_TEST }}
          CLOUDFRONT_BASE_URL: ${{ secrets.CLOUDFRONT_BASE_URL_TEST }}
          CLOUDFRONT_KEY_PAIR_ID: ${{secrets.CLOUDFRONT_KEY_PAIR_ID}}
          CLOUDFRONT_PRIVATE_KEY: ${{ secrets.CLOUDFRONT_PRIVATE_KEY }}
          USER1_EMAIL: ${{ secrets.USER1_EMAIL_TEST }}
          USER1_PASSWORD: ${{ secrets.USER1_PASSWORD_TEST }}
          USER2_EMAIL: ${{ secrets.USER2_EMAIL_TEST }}
          USER2_PASSWORD: ${{ secrets.USER2_PASSWORD_TEST }}
          USER3_EMAIL: ${{ secrets.USER3_EMAIL_TEST }}
          USER3_PASSWORD: ${{ secrets.USER3_PASSWORD_TEST }}
          USER4_EMAIL: ${{ secrets.USER4_EMAIL_TEST }}
          USER4_PASSWORD: ${{ secrets.USER4_PASSWORD_TEST }}
          REVALIDATION_SECRET: ${{ secrets.REVALIDATION_SECRET_TEST }}
          NEXT_JS_API_URL: ${{ secrets.NEXT_JS_API_URL_TEST }}
          NEXT_JS_URL: ${{ secrets.NEXT_JS_URL_TEST }}


  build-client:
    runs-on: self-hosted
    needs: start-server # Ensure the server is started before this job runs
    steps:
      - name: Set Environment Variables
        id: set-env
        run: |
          if [ "${{ github.ref }}" == "refs/heads/test" ]; then
            echo "STAGE=testing" >> $GITHUB_ENV
            echo "CACHE_KEY=testing" >> $GITHUB_ENV
          else
            echo "STAGE=prod" >> $GITHUB_ENV
            echo "CACHE_KEY=production" >> $GITHUB_ENV
          fi
      - name: Cache client npm dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
          key: ${{ runner.os }}-npm-client-${{ env.CACHE_KEY }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-client-${{ env.CACHE_KEY }}

      - name: Install client npm dependencies
        run: |
          npm ci

      - name: Cache Next.js build artifacts
        uses: actions/cache@v4
        with:
          # See here for caching with `yarn` https://github.com/actions/cache/blob/main/examples.md#node---yarn or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ env.CACHE_KEY }}-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ env.CACHE_KEY }}

      - name: Build Client Application to Production
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          rm -rf .next  # Clean up previous build artifacts
          npm run build  # Build the client application
          pm2 restart "client" || pm2 start npm --name "client" -- start
          pm2 save
        env:
          API_URL: ${{ secrets.API_URL }}
          ANALYZE: ${{ secrets.ANALYZE }}
          NEXT_JS_URL: ${{ secrets.NEXT_JS_URL }}
          REVALIDATION_SECRET: ${{ secrets.REVALIDATION_SECRET }}

      - name: Build Client Application to Test Environment
        if: ${{ github.ref == 'refs/heads/test' }}
        run: |
          rm -rf .next  # Clean up previous build artifacts
          npm run build  # Build the client application
          PORT=3002 pm2 restart "test" || PORT=3002 pm2 start npm --name "test" -- start
          pm2 save
        env:
          API_URL: ${{ secrets.API_URL_TEST }}
          ANALYZE: ${{ secrets.ANALYZE_TEST }}
          NEXT_JS_URL: ${{ secrets.NEXT_JS_URL_TEST }}
          REVALIDATION_SECRET: ${{ secrets.REVALIDATION_SECRET_TEST }}

  deploy:
    runs-on: self-hosted
    needs: build-client # Wait for the client to build before deploying
    steps:
      - name: Deploy Build to Production
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          # Build the application in a temporary directory to minimize downtime
          sudo mkdir -p /var/www/next_temp
          sudo cp -r ~/actions-runner/_work/500kalima/500kalima/.next /var/www/next_temp/
          sudo rm -rf /var/www/.next
          # Replace the old version with the new version
          sudo mv /var/www/next_temp/.next /var/www/.next
          # Remove temp directory
          sudo rm -rf /var/www/next_temp

      - name: Deploy Build to Test Environment
        if: ${{ github.ref == 'refs/heads/test' }}
        run: |
          # Build the application in a temporary directory to minimize downtime
          sudo mkdir -p /var/www/test_temp
          sudo cp -r ~/actions-runner/_work/500kalima/500kalima/.next /var/www/test_temp/
          sudo rm -rf /var/www/test/.next
          # Replace the old version with the new version
          sudo mv /var/www/test_temp/.next /var/www/test/.next
          # Remove temp directory
          sudo rm -rf /var/www/test_temp

      - name: Restart Nginx Service
        run: |
          sudo systemctl reload nginx
          sudo systemctl restart nginx
